{"version":3,"sources":["../src/download.js"],"names":["valid","npmInstall","npmView","name","stdout","stderr","console","log","__","json","data","info","error","pkg","eval","j3Config","run","cmd","args","options","resolve","reject","ls","err","on","str","toString","npm_path","cwd","modules_path","undefined"],"mappings":";;;;;;;;;;QAqBsBA,K,GAAAA,K;QA0CAC,U,GAAAA,U;QAUAC,O,GAAAA,O;;AArEtB;;AAIA;;;;AACA;;;;;;AAEA;kBACe,gBAAgBC,IAAhB,EAAsBC,MAAtB,EAA8BC,MAA9B,EAAsC;AACjD,QAAI,EAAC,MAAML,MAAMG,IAAN,EAAYC,MAAZ,EAAoBC,MAApB,CAAP,CAAJ,EAAwC;AACpCC,gBAAQC,GAAR,CAAY,eAAKC,EAAL,CAAQ,eAAR,CAAZ;AACA;AACH;AACD,UAAMP,WAAWE,IAAX,EAAiBC,MAAjB,EAAyBC,MAAzB,CAAN;AACH,C;;AAED;AApBA;;;;AAqBO,eAAeL,KAAf,CAAqBG,IAArB,EAA2BC,MAA3B,EAAmCC,MAAnC,EAA2C;AAC9C,QAAII,OAAO,MAAMP,QAAQC,IAAR,EAAcO,QAAQ;AACnCJ,gBAAQK,IAAR,CAAaD,IAAb;AACH,KAFgB,EAEdA,QAAQ;AACPJ,gBAAQM,KAAR,CAAcF,IAAd;AACH,KAJgB,CAAjB;AAKA,QAAIG,MAAMC,KAAK,MAAML,IAAN,GAAa,GAAlB,CAAV;AACA,QAAI,CAACI,IAAIE,QAAT,EAAmB;AACf,eAAO,KAAP;AACH;AACD,WAAO,IAAP;AACH;;AAED;AACA,SAASC,GAAT,CAAaC,GAAb,EAAkBC,IAAlB,EAAwBC,OAAxB,EAAiCf,MAAjC,EAAyCC,MAAzC,EAAiD;AAC7C,WAAO,sBAAY,CAACe,OAAD,EAAUC,MAAV,KAAqB;AACpC,YAAIC,KAAK,0BAAML,GAAN,EAAWC,IAAX,EAAiBC,OAAjB,CAAT;;AAEA,YAAII,MAAM,EAAV;AAAA,YACIZ,OAAO,EADX;AAEAW,WAAGlB,MAAH,CAAUoB,EAAV,CAAa,MAAb,EAAqBd,QAAQ;AACzB,gBAAIe,MAAMf,KAAKgB,QAAL,EAAV;AACAf,oBAAQc,GAAR;AACArB,mBAAOqB,GAAP;AACH,SAJD;;AAMAH,WAAGjB,MAAH,CAAUmB,EAAV,CAAa,MAAb,EAAqBd,QAAQ;AACzB,gBAAIe,MAAMf,KAAKgB,QAAL,EAAV;AACAH,mBAAOE,GAAP;AACApB,mBAAOoB,GAAP;AACH,SAJD;;AAMAH,WAAGE,EAAH,CAAM,MAAN,EAAc,MAAM;AAChB,gBAAID,GAAJ,EAAS;AACLF,uBAAOE,GAAP;AACH,aAFD,MAEO;AACHH,wBAAQT,IAAR;AACH;AACJ,SAND;AAOH,KAxBM,CAAP;AAyBH;;AAEM,eAAeV,UAAf,CAA0BE,IAA1B,EAAgCC,MAAhC,EAAwCC,MAAxC,EAAgD;AACnD,QAAI;AACA,cAAMW,IAAI,iBAAOW,QAAX,EAAqB,CAAC,SAAD,EAAYxB,IAAZ,CAArB,EAAwC;AAC1CyB,iBAAK,iBAAOC;AAD8B,SAAxC,EAEHzB,MAFG,EAEKC,MAFL,CAAN;AAGH,KAJD,CAIE,OAAOkB,GAAP,EAAY;AACV,cAAMA,GAAN;AACH;AACJ;;AAEM,eAAerB,OAAf,CAAuBC,IAAvB,EAA6BC,MAA7B,EAAqCC,MAArC,EAA6C;AAChD,QAAI;AACA,eAAO,MAAMW,IAAI,iBAAOW,QAAX,EAAqB,CAAC,MAAD,EAASxB,IAAT,CAArB,EAAqC2B,SAArC,EAAgD1B,MAAhD,EAAwDC,MAAxD,CAAb;AACH,KAFD,CAEE,OAAOkB,GAAP,EAAY;AACV,cAAMA,GAAN;AACH;AACJ","file":"download.js","sourcesContent":["/*\r\n    用于模块文件及依赖自动下载，使用npm完成，吴丹妮\r\n*/\r\n\r\nimport {\r\n    spawn\r\n} from 'child_process'\r\n\r\nimport config from './config'\r\nimport lang from 'i18n'\r\n\r\n// 下载前进行验证，如果确实是j3模块，则下载\r\nexport default async function (name, stdout, stderr) {\r\n    if (!await valid(name, stdout, stderr)) {\r\n        console.log(lang.__('not_j3_module'))\r\n        return\r\n    }\r\n    await npmInstall(name, stdout, stderr)\r\n}\r\n\r\n// 验证模块是否符合需求\r\nexport async function valid(name, stdout, stderr) {\r\n    let json = await npmView(name, data => {\r\n        console.info(data)\r\n    }, data => {\r\n        console.error(data)\r\n    })\r\n    let pkg = eval('(' + json + ')')\r\n    if (!pkg.j3Config) {\r\n        return false\r\n    }\r\n    return true\r\n}\r\n\r\n// 执行一个进程，并提供输入及输出。\r\nfunction run(cmd, args, options, stdout, stderr) {\r\n    return new Promise((resolve, reject) => {\r\n        let ls = spawn(cmd, args, options)\r\n\r\n        let err = '',\r\n            info = ''\r\n        ls.stdout.on('data', data => {\r\n            let str = data.toString()\r\n            info += str\r\n            stdout(str)\r\n        })\r\n\r\n        ls.stderr.on('data', data => {\r\n            let str = data.toString()\r\n            err += str\r\n            stderr(str)\r\n        })\r\n\r\n        ls.on('exit', () => {\r\n            if (err) {\r\n                reject(err)\r\n            } else {\r\n                resolve(info)\r\n            }\r\n        })\r\n    })\r\n}\r\n\r\nexport async function npmInstall(name, stdout, stderr) {\r\n    try {\r\n        await run(config.npm_path, ['install', name], {\r\n            cwd: config.modules_path\r\n        }, stdout, stderr)\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n}\r\n\r\nexport async function npmView(name, stdout, stderr) {\r\n    try {\r\n        return await run(config.npm_path, ['view', name], undefined, stdout, stderr)\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n}\r\n"]}