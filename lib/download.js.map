{"version":3,"sources":["../src/download.js"],"names":["name","stdout","stderr","npmView","console","info","data","error","json","pkg","JSON","parse","j3Config","valid","run","npm_default_path","undefined","npmInstall","log","download","cmd","args","options","Promise","resolve","reject","ls","err","on"],"mappings":";;;;;;;AAeA;;wEACO,kBAAqBA,IAArB,EAA2BC,MAA3B,EAAmCC,MAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACcC,QAAQH,IAAR,EAAc,gBAAQ;AACnCI,oCAAQC,IAAR,CAAaC,IAAb;AACH,yBAFgB,EAEd,gBAAQ;AACPF,oCAAQG,KAAR,CAAcD,IAAd;AACH,yBAJgB,CADd;;AAAA;AACCE,4BADD;AAMCC,2BAND,GAMOC,KAAKC,KAAL,CAAWH,IAAX,CANP;;AAAA,4BAOEC,IAAIG,QAPN;AAAA;AAAA;AAAA;;AAAA,0DAQQ,KARR;;AAAA;AAAA,0DAUI,IAVJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeC,K;;;;;AAatB;;;;wEA2BO,kBAA0Bb,IAA1B,EAAgCC,MAAhC,EAAwCC,MAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEOY,IAAI,iBAAOC,gBAAX,EAA6B,CAAE,SAAF,EAAaf,IAAb,CAA7B,EAAkDgB,SAAlD,EAA6Df,MAA7D,EAAqEC,MAArE,CAFP;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAee,U;;;;;;wEAQf,kBAAuBjB,IAAvB,EAA6BC,MAA7B,EAAqCC,MAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEcY,IAAI,iBAAOC,gBAAX,EAA6B,CAAE,MAAF,EAAUf,IAAV,CAA7B,EAA+CgB,SAA/C,EAA0Df,MAA1D,EAAkEC,MAAlE,CAFd;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeC,O;;;;;AA5DtB;;AACA;;;;;;2cALA;;;;AAOA;;uEACe,iBAAgBH,IAAhB,EAAsBC,MAAtB,EAA8BC,MAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACAW,MAAMb,IAAN,EAAYC,MAAZ,EAAoBC,MAApB,CADA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEPE,gCAAQc,GAAR,CAAY,SAAZ;;AAFO;AAAA;AAAA,+BAILC,SAASnB,IAAT,EAAeC,MAAf,EAAuBC,MAAvB,CAJK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;;;;;;AAsBf,SAASY,GAAT,CAAaM,GAAb,EAAkBC,IAAlB,EAAwBC,OAAxB,EAAiCrB,MAAjC,EAAyCC,MAAzC,EAAiD;AAC7C,WAAO,IAAIqB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,YAAIC,KAAK,0BAAMN,GAAN,EAAWC,IAAX,EAAiBC,OAAjB,CAAT;;AAEA,YAAIK,MAAM,EAAV;AAAA,YAActB,OAAO,EAArB;AACAqB,WAAGzB,MAAH,CAAU2B,EAAV,CAAa,MAAb,EAAqB,gBAAQ;AACzBvB,oBAAQC,IAAR;AACAL,mBAAOK,IAAP;AACH,SAHD;;AAKAoB,WAAGxB,MAAH,CAAU0B,EAAV,CAAa,MAAb,EAAqB,gBAAQ;AACzBD,mBAAOrB,IAAP;AACAJ,mBAAOI,IAAP;AACH,SAHD;;AAKAoB,WAAGE,EAAH,CAAM,MAAN,EAAc,YAAM;AAChB,gBAAID,GAAJ,EAAS;AACLF,uBAAOE,GAAP;AACH,aAFD,MAGK;AACDH,wBAAQnB,IAAR;AACH;AACJ,SAPD;AAQH,KAtBM,CAAP;AAuBH","file":"download.js","sourcesContent":["/*\r\n    用于模块文件及依赖自动下载，使用npm完成，吴丹妮\r\n*/\r\n\r\nimport { spawn } from 'child_process'\r\nimport config from './config'\r\n\r\n// 下载前进行验证，如果确实是j3模块，则下载\r\nexport default async function (name, stdout, stderr) {\r\n    if (!await valid(name, stdout, stderr)) {\r\n        console.log('不是J3模块包')\r\n    }\r\n    await download(name, stdout, stderr)\r\n}\r\n\r\n// 验证模块是否符合需求\r\nexport async function valid(name, stdout, stderr) {\r\n    let json = await npmView(name, data => {\r\n        console.info(data)\r\n    }, data => {\r\n        console.error(data)\r\n    })\r\n    let pkg = JSON.parse(json)\r\n    if (!pkg.j3Config) {\r\n        return false\r\n    }\r\n    return true\r\n}\r\n\r\n// 执行一个进程，并提供输入及输出。\r\nfunction run(cmd, args, options, stdout, stderr) {\r\n    return new Promise((resolve, reject) => {\r\n        let ls = spawn(cmd, args, options)\r\n\r\n        let err = '', info = ''\r\n        ls.stdout.on('data', data => {\r\n            info += data\r\n            stdout(data)\r\n        })\r\n\r\n        ls.stderr.on('data', data => {\r\n            err += data\r\n            stderr(data)\r\n        })\r\n\r\n        ls.on('exit', () => {\r\n            if (err) {\r\n                reject(err)\r\n            }\r\n            else {\r\n                resolve(info)\r\n            }\r\n        })\r\n    })\r\n}\r\n\r\nexport async function npmInstall(name, stdout, stderr) {\r\n    try {\r\n        await run(config.npm_default_path, [ 'install', name ], undefined, stdout, stderr)\r\n    } catch(err) {\r\n        throw err\r\n    }\r\n}\r\n\r\nexport async function npmView(name, stdout, stderr) {\r\n    try {\r\n        return await run(config.npm_default_path, [ 'view', name ], undefined, stdout, stderr)\r\n    } catch(err) {\r\n        throw err\r\n    }\r\n}\r\n"]}